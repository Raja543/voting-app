// app/api/users/route.ts
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { dbConnect } from "@/lib/mongodb";
import User from "@/models/user";

// GET: fetch all users
export async function GET() {
  try {
    await dbConnect();
    const users = await User.find({}, { password: 0 }); // exclude passwords
    return NextResponse.json(users);
  } catch (err) {
    console.error("GET /api/users error:", err);
    return NextResponse.json({ error: "Failed to fetch users" }, { status: 500 });
  }
}

// POST: signup new user OR update whitelist by email
export async function POST(req: Request) {
  try {
    await dbConnect();
    const body = await req.json();
    const { name, email, password, isWhitelisted } = body;

    // -------------------------
    // Handle whitelist update (admin only)
    // -------------------------
    if (email && typeof isWhitelisted === "boolean" && !name && !password) {
      const updatedUser = await User.findOneAndUpdate(
        { email },
        { isWhitelisted },
        { new: true }
      ).select("-password");

      if (!updatedUser) {
        return NextResponse.json({ error: "User not found" }, { status: 404 });
      }

      return NextResponse.json({ success: true, user: updatedUser });
    }

    // -------------------------
    // Handle signup
    // -------------------------
    if (!name || !email || !password) {
      return NextResponse.json({ error: "All fields are required" }, { status: 400 });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return NextResponse.json({ error: "User already exists" }, { status: 400 });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await User.create({
      // _id will be auto-generated by schema
      name,
      email,
      password: hashedPassword,
      isAdmin: false,
      isWhitelisted: false,
    });

    return NextResponse.json({
      message: "User created successfully",
      user: {
        _id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        isAdmin: newUser.isAdmin,
        isWhitelisted: newUser.isWhitelisted,
      },
    });
  } catch (err) {
    console.error("POST /api/users error:", err);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}
